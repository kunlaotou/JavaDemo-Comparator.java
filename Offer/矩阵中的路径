题目描述
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，
         每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。
                例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，
                          因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。
                         
                         
public class Solution {
    boolean[] visited;
    public boolean hasPath(char[] matrix, int rows, int cols, char[] str) {
		if(matrix.length <= 0 || rows < 0 || cols < 0 || str.length <= 0) {
			return false;
		}
		
	    visited = new boolean[rows * cols];

		for(int i = 0;i < rows;i ++) {
			for(int j = 0;j < cols;j ++) {
				if(matrix[i * cols + j] == str[0] && isPath(matrix, rows, cols, i, j, str, 0)) {
					return true;
				}
			}
		}
		return false;
    }
	
	public boolean isPath(char[] matrix, int rows, int cols, int i, int j, char[] str, int index) {
		if(index == str.length) {
			return true;
		}
		 
		//当前点折算到原数组的位置是：row * cols + col
		if(i < 0 || i >= rows || j < 0 || j >= cols 
		   || visited[i * cols + j] || matrix[i * cols + j] != str[index]) {
			
			return false;
		}
        
        visited[i * cols + j] = true;
        index++;
	   
        //第一个点是合法的起点之后开始回溯:上下左右进行搜索
        if( isPath(matrix, rows, cols, i - 1, j, str, index) || 
            isPath(matrix, rows, cols, i + 1, j, str, index) ||
            isPath(matrix, rows, cols, i, j - 1, str, index) ||
            isPath(matrix, rows, cols, i, j + 1, str, index)){
             return true;   
        }
		visited[i * cols + j] = false;
		
		return false;
    }

}


解题思路：
       数组元素挨个进行DFS，记得每个元素DFS完了以后要把Visited复原，visited如果声明在外面，就可以不用传参
