题目描述
地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。
 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？
 
 
 public class Solution {
    boolean visited[];
    public int movingCount(int threshold, int rows, int cols){
        
        if(rows <= 0 || cols <= 0 || threshold <= 0){return 0;}
        
         visited = new boolean[rows * cols];
        
        int count = dfs(threshold, rows, cols, 0, 0); 
       
        return count;
    }
    public int dfs(int threshold, int rows, int cols, int i, int j){
        int temp = 0;
        if(i < 0 || i >= rows || j < 0 || j >= cols || visited[i * cols + j] || !judge(i, j, threshold) ){
            return temp;
        }
        visited[i * cols + j] = true;
        temp = 1 + dfs(threshold, rows, cols, i - 1, j)
                  + dfs(threshold, rows, cols, i + 1, j)
                  + dfs(threshold, rows, cols, i, j - 1)
                  + dfs(threshold, rows, cols, i, j + 1);
        
        return temp;
    }
    public boolean judge(int i, int j, int threshold){
        int sum = 0;
        while(i > 0){
            sum += i % 10;
            i = i/10;
        }
        while(j > 0){
            sum += j % 10;
            j = j/10;
        }
        if(sum <= threshold){
            return true;
        }
        return false;
    }
}


解题思路：
        人家已经规定从(0,0)开始走了，所以不用循环递归了，直接递归。
        先判断不满足条件的时候，即递归结束条件。
        剩下的情况就是满足条件的情况，调用dfs递归，然后visited设置为true
        
        
        
        
        
        
